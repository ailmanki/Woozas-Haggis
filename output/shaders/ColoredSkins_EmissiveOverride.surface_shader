<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true" />
		
		<input name="blendMap" type="texture" address="wrap">materials/effects/mesh_effects/skulk_view_blood.dds</input>
		<input name="overlayMap" type="texture" address="wrap">materials/effects/mesh_effects/nanoshield_circuit.dds</input>
		
		<input name="hiddenAmount" type="float">0.0</input>
		
		<input name="colorizeModel" type="float">1</input>
		<input name="poweredBool" type="float">1</input>
		
		<!-- Atlas texture behavior data -->
		<input name="colorMapIndex" type="float">0</input>
		<input name="numColumns" type="float">1</input>
		<input name="numRows" type="float">4</input>
		
		<input name="modelColorMap" type="texture" address="wrap" />
		
		<input name="modelColorBaseR" type="float">0</input>
		<input name="modelColorBaseG" type="float">0</input>
		<input name="modelColorBaseB" type="float">0</input>
		
		<input name="modelColorAccentR" type="float">0</input>
		<input name="modelColorAccentG" type="float">0</input>
		<input name="modelColorAccentB" type="float">0</input>
		
		<input name="modelColorTrimR" type="float">0</input>
		<input name="modelColorTrimG" type="float">0</input>
		<input name="modelColorTrimB" type="float">0</input>
		
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
	</params>
	
	<code>
	<![CDATA[
		
		float paramQuick( float x, float p ) {
			return pow(x,p);
		}
		
		float paramSlow( float x, float p ) {
			return 1 - pow(abs(x),p);
		}
		
		float3 DecodeNormal( const float4 texNormal )
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
		        return n.xyz;
		}
		
		
		float3 BlendColorOverlay( float3 texColor, float3 blendColor ) 
		//Spcefic to handling emissive colorization in similar to Photoshop's Overlay layer blend-mode
		{
			float3 resultColor;
			
			if (texColor.r > 0.5) {
				resultColor.r = 1 - (1 - 2 * (texColor.r - 0.5)) * (1 - blendColor.r);
			} else {
				resultColor.r = (2 * texColor.r) * blendColor.r;
			}

			if (texColor.g > 0.5) {
				resultColor.g = 1 - (1 - 2 * (texColor.g - 0.5)) * (1 - blendColor.g);
			} else {
				resultColor.g = (2 * texColor.g) * blendColor.g;
			}
			
			if (texColor.b > 0.5) {
				resultColor.b = 1 - (1 - 2 * (texColor.b - 0.5)) * (1 - blendColor.b);
			} else {
				resultColor.b = (2 * texColor.b) * blendColor.b;
			}
			
			return resultColor;
		}
		
		
		// For all settings: 1.0 = 100% 0.5=50% 1.5 = 150%
		float3 ContrastSaturationBrightness(float3 color, float brt, float sat, float con)
		{
			// Increase or decrease theese values to adjust r, g and b color channels seperately
			const float AvgLumR = 0.5;
			const float AvgLumG = 0.5;
			const float AvgLumB = 0.5;
			
			const float3 LumCoeff = float3(0.2125, 0.7154, 0.0721);
			
			float3 AvgLumin = float3(AvgLumR, AvgLumG, AvgLumB);
			float3 brtColor = color * brt;
			float intensityf = dot(brtColor, LumCoeff);
			float3 intensity = float3(intensityf, intensityf, intensityf);
			float3 satColor = lerp(intensity, brtColor, sat);
			float3 conColor = lerp(AvgLumin, satColor, con);
			return conColor;
		}
		
		float HueToRGB(float f1, float f2, float hue)
		{
			if (hue < 0.0)
				hue += 1.0;
			else if (hue > 1.0)
				hue -= 1.0;
			float res;
			if ((6.0 * hue) < 1.0)
				res = f1 + (f2 - f1) * 6.0 * hue;
			else if ((2.0 * hue) < 1.0)
				res = f2;
			else if ((3.0 * hue) < 2.0)
				res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			else
				res = f1;
			return res;
		}
		
		float3 RGBToHSL(float3 color)
		{
			float3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)
			
			float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB
			float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB
			float delta = fmax - fmin;             //Delta RGB value

			hsl.z = (fmax + fmin) / 2.0; // Luminance

			if (delta == 0.0)		//This is a gray, no chroma...
			{
				hsl.x = 0.0;	// Hue
				hsl.y = 0.0;	// Saturation
			}
			else                                    //Chromatic data...
			{
				if (hsl.z < 0.5)
					hsl.y = delta / (fmax + fmin); // Saturation
				else
					hsl.y = delta / (2.0 - fmax - fmin); // Saturation
				
				float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;
				float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;
				float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;

				if (color.r == fmax )
					hsl.x = deltaB - deltaG; // Hue
				else if (color.g == fmax)
					hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue
				else if (color.b == fmax)
					hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue

				if (hsl.x < 0.0)
					hsl.x += 1.0; // Hue
				else if (hsl.x > 1.0)
					hsl.x -= 1.0; // Hue
			}

			return hsl;
		}
		
		float3 HSLToRGB(float3 hsl)
		{
			float3 rgb;
			
			if (hsl.y == 0.0)
				rgb = float3(hsl.z, hsl.z, hsl.z); // Luminance
			else
			{
				float f2;
				
				if (hsl.z < 0.5)
					f2 = hsl.z * (1.0 + hsl.y);
				else
					f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
					
				float f1 = 2.0 * hsl.z - f2;
				
				rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));
				rgb.g = HueToRGB(f1, f2, hsl.x);
				rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));
			}
			
			return rgb;
		}
		
		
	//rgb_to_hsv_no_clip() & hsv_to_rgb() & BlendColor() copied from under Ms-PL License:
	// http://wpfslblendmodefx.codeplex.com/SourceControl/latest#WPF35SL3/WPFSLBlendModeFx/WPFBlendModeEffectLibrary/ShaderSource/OverlayEffect.fx
		
		float3 rgb_to_hsv_no_clip( float3 RGB ) {
		
			float3 HSV;
			
			float minChannel = min( min( RGB.x, RGB.y ), RGB.z );
			float maxChannel = max( max( RGB.x, RGB.y ), RGB.z );

			HSV.xy = 0;
			HSV.z = maxChannel;
			float delta = maxChannel - minChannel; // delta RGB value

			// if gray, leave H & S at zero
			if (delta != 0)
			{
				HSV.y = delta / HSV.z;
				float3 delRGB;
				delRGB =  (HSV.zzz - RGB + 3 * delta ) / (6.0 * delta);
				if      ( RGB.x == HSV.z ) HSV.x = delRGB.z - delRGB.y;
				else if ( RGB.y == HSV.z ) HSV.x = ( 1.0/3.0) + delRGB.x - delRGB.z;
				else                       HSV.x = ( 2.0/3.0) + delRGB.y - delRGB.x;
			}

			return HSV;
		}

		float3 hsv_to_rgb(float3 HSV) {
		
			float3 RGB = HSV.z;
			float var_h = HSV.x * 6;
			float var_i = floor(var_h); // Or ... var_i = floor( var_h )
			float var_1 = HSV.z * (1.0 - HSV.y);
			float var_2 = HSV.z * (1.0 - HSV.y * (var_h-var_i));
			float var_3 = HSV.z * (1.0 - HSV.y * (1-(var_h-var_i)));
			
			if      (var_i == 0) { RGB = float3(HSV.z, var_3, var_1); }
			else if (var_i == 1) { RGB = float3(var_2, HSV.z, var_1); }
			else if (var_i == 2) { RGB = float3(var_1, HSV.z, var_3); }
			else if (var_i == 3) { RGB = float3(var_1, var_2, HSV.z); }
			else if (var_i == 4) { RGB = float3(var_3, var_1, HSV.z); }
			else                 { RGB = float3(HSV.z, var_1, var_2); }
			
			return RGB;
		}
		
		float3 BlendColor( float3 base, float3 blend ) {
			
			float3 blendHSV = rgb_to_hsv_no_clip( blend );
			return hsv_to_rgb( float3 ( blendHSV.x, blendHSV.y, rgb_to_hsv_no_clip( base ).z ) );
			
		}
		
		float3 BlendHue(float3 base, float3 blend)
		{
			float3 baseHSL = RGBToHSL(base);
			return HSLToRGB(float3(RGBToHSL(blend).r, baseHSL.g, baseHSL.b));
		}
		
		float3 BlendAdd( float3 base, float3 blend ) {
			return min( base + blend , float3(1.0, 1.0, 1.0) );
		}
		
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			float f             = 1 - hiddenAmount;
			
			float param         = tex2D(blendMap, input.texCoord * 2.5).a; // speading parameter
			float textureSpeed  = 2;
			float destroySpeed  = 1;
		
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );	
			material.specular	= specularGloss.rgb; //Can this be calculated instead?
			material.gloss		= specularGloss.a;
			
			float opacity       = paramSlow(param,destroySpeed);
			float blend         = paramQuick(param,textureSpeed);
			
			//Setup, "rebuild skin colors" since we can't pass float3, Vector, or Color to a material
			float3 modelColorBase = float3( modelColorBaseR, modelColorBaseG, modelColorBaseB );
			float3 modelColorAccent = float3( modelColorAccentR, modelColorAccentG, modelColorAccentB );
			float3 modelColorTrim = float3( modelColorTrimR, modelColorTrimG, modelColorTrimB );
			
			float3 albedoTex = tex2D( albedoMap, input.texCoord ).rgb;	//No Alpha channel due to Deferred.hlsl - struct Material{}
			
			float2 colorMapUV = input.texCoord;
			if( colorMapIndex >= 0 ) {
				float row = floor( colorMapIndex / numColumns );
				float col = colorMapIndex - row * numColumns;
			
				colorMapUV.x = ( col + colorMapUV.x ) / numColumns;
				colorMapUV.y = ( row + colorMapUV.y ) / numRows;
			}
			
			float4 modelColorMapTex = tex2D( modelColorMap, colorMapUV ).rgba;
			
			// un-premultiply the blendColor alpha out from blendColor
			float3 tempModelColorBase = clamp( modelColorBase.rgb / modelColorMapTex.a, (float) 0, (float) 1 );	//OpenGL support, saturate() not in GLSL
			
			
	//Albedo/Diffuse Layer --------------------------------
			
			float3 modBaseAlbedoTex = albedoTex;
			float3 grayAlbedoMap = dot( albedoTex.rgb, float3(0.299, 0.587, 0.114) ); //NTSC grey
			
			if( modelColorMapTex.a > 0 ) {
			//Apply gray-scale of teamColorMap to albedo to effect shapes/patterns before color is blended in
			//Note: some detail of the original albedo texture is lost in the process
				modBaseAlbedoTex = lerp( grayAlbedoMap.rgb, grayAlbedoMap.rgb + modelColorMapTex.rgb, modelColorMapTex.a);
			}
			
			
			float3 blackColor = float3(0.001,0.001,0.001);
			float3 tmpColor = float3(0,0,0);
			
			if( modelColorMapTex.a > 0 ) {
				// apply the blend mode math - Hue & Saturation
				if( modelColorBase.r > 0 && modelColorBase.g > 0 && modelColorBase.b > 0 ) {
					tmpColor += BlendColor( modBaseAlbedoTex.rgb, modelColorBase.rgb ) * modelColorMapTex.r;
				} else {
					tmpColor += albedoTex;
				}
				
				if( poweredBool == 0 ) {
					modelColorAccent = blackColor;
				}
				
				if( modelColorAccent.r > 0 && modelColorAccent.g > 0 && modelColorAccent.b > 0 ) {
					tmpColor += BlendColor( modBaseAlbedoTex.rgb, modelColorAccent.rgb ) * modelColorMapTex.g;
				}
				
				if( modelColorTrim.r > 0 && modelColorTrim.g > 0 && modelColorTrim.b > 0 ) {
					tmpColor += BlendColor( modBaseAlbedoTex.rgb, modelColorTrim.rgb ) * modelColorMapTex.b;
				}
				
			} else {
				tmpColor += albedoTex.rgb;
			}
			
			if( colorizeModel == 1 && modelColorMapTex.a > 0 ) {
				material.albedo = (1 - modelColorMapTex.a) * albedoTex.rgb + tmpColor.rgb * modelColorMapTex.a;
			} else {
				material.albedo = albedoTex;
			}
			
	//Emissive Layer --------------------------------------
			
			// Blending
			if (blend + f > 1) {
				
				//TODO Add support for Accent(G-Channel) to define coloration of emissive layer, with atlas support
				
				float3 orgEmissiveTex = tex2D( emissiveMap, input.texCoord ).rgb;
				float4 colorMapEmissiveTex;
				
				if( modelColorMapTex.g > 0 && modelColorMapTex.a > 0 ) {
					colorMapEmissiveTex.r = modelColorMapTex.g;
				}
				if( modelColorMapTex.g > 0 && modelColorMapTex.a > 0 ) {
					colorMapEmissiveTex.g = modelColorMapTex.g;
				}
				if( modelColorMapTex.g > 0 && modelColorMapTex.a > 0 ) {
					colorMapEmissiveTex.b = modelColorMapTex.g;
				}
				colorMapEmissiveTex.a = modelColorMapTex.a;
				
				
				float3 greyEmissive = dot( colorMapEmissiveTex.rgb, float3(0.299, 0.587, 0.114) );
				float3 tmpEmissiveModelColor = clamp( modelColorAccent.rgb / modelColorMapTex.a, (float) 0.0, (float) 1.0 );
				
				if( modelColorMapTex.a > 0 && colorizeModel == 1 ) {
					if( modelColorMapTex.g == 255 && modelColorMapTex.a > 0 ) {
						material.emissive = BlendColor( colorMapEmissiveTex.rgb, tmpEmissiveModelColor.rgb );
					} else {
						material.emissive = BlendColorOverlay( colorMapEmissiveTex.rgb, tmpEmissiveModelColor.rgb );
					}
					
				} else {
					material.emissive = tex2D( emissiveMap, input.texCoord ).rgb;
				}
				
				/*
				float3 orgEmissiveTex = tex2D( emissiveMap, input.texCoord ).rgb;
				float3 emissiveTex;
				
				if( modelColorMapTex.g > 0 && emissiveTex.r == 0 && modelColorMapTex.a > 0 ) {
					emissiveTex.r = modelColorMapTex.g;
				}
				if( modelColorMapTex.g > 0 && emissiveTex.g == 0 && modelColorMapTex.a > 0 ) {
					emissiveTex.g = modelColorMapTex.g;
				}
				if( modelColorMapTex.g > 0 && emissiveTex.b == 0 && modelColorMapTex.a > 0 ) {
					emissiveTex.b = modelColorMapTex.g;
				}
				
				float3 greyEmissive = dot( emissiveTex.rgb, float3(0.299, 0.587, 0.114) ); //NTSC grey
				//float3 tmpEmissiveModelColor = clamp( modelColorAccent.rgb / modelColorMapTex.a, (float) 0.0, (float) 1.0 );	//adjust per colorMap alpha
				
				if( modelColorMapTex.a > 0 && colorizeModel == 1 ) {
					
					//float3 tmpEmissive = BlendHue( orgEmissiveTex.rgb, modelColorAccent.rgb );
					//float3 tmpEmissive = BlendColorOverlay( orgEmissiveTex.rgb, greyEmissive.rgb );
					//float3 tmpEmissive = BlendColor( orgEmissiveTex.rgb, greyEmissive.rgb );
					float3 tmpEmissive = BlendAdd( greyEmissive.rgb, modelColorAccent.rgb );
					
					material.emissive = BlendColorOverlay( tmpEmissive.rgb, modelColorAccent.rgb );
					//material.emissive = BlendColor( greyEmissive.rgb, orgEmissiveTex.rgb ) * modelColorMapTex.a;
					//material.emissive = BlendHue( tmpEmissive.rgb, modelColorAccent.rgb );
					
				} else {
					material.emissive = emissiveTex;
				}
				*/
				
			} else {
			//Death / Model dissolve effect
				
				float3 dissolveModelColor = modelColorAccent * 50;
				float4 greyOverlayMap = dot( tex2D( overlayMap, input.texCoord * float2(10, 9) ), float3(0.299, 0.587, 0.114) );		
				
				if( colorizeModel == 1 ) {
					material.emissive = (1 - (blend + f)) * greyOverlayMap.rgb * dissolveModelColor;
				} else {
					material.emissive = (1 - (blend + f)) * tex2D(overlayMap, input.texCoord * float2(10, 9)).rgb * float3(2, 3, 6) * 50;
				}
			}
			
			// Opacity
			material.opacity = opacity + f - 0.5;
			if (material.opacity < 0.5) {
				material.emissive = 0;
			}
			
			material.id = 1; // To make it show up on alien vision
		}
			
	]]>
	</code>

</shader>